/**
 * This class creates a window that allows the user to draw fractal pictures on
 * 
 * @author  Ny Pham
 */

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class DrawFractal implements ActionListener{
  
  /**
   * Stores the window frame that all component will be added to
   */
  JFrame frame;
  /**
   * Stores the canvas that will contain the pictures of the fractals
   */
  Canvas canvas;
  /**
   * Stores the panel that will contain the buttons
   */
  JPanel panel;
  /**
   * Stores the context that will be used to draw on the canvas
   */
  Graphics graphics;
  
  /**
   * Creates the window that will contain the the buttons and canvas where the
   * fractal pictures will appear.
   * 
   * @param  width   the width of the window where the picture will appear
   * @param  height  the height of the window where the picture will appear
   */
  public DrawFractal(int width, int height){
    if(width < 0 || height < 0)
      throw new IllegalArgumentException("Height or width cannot be negative.");
    frame = new JFrame();
    canvas = new Canvas();
    canvas.setSize(width, height);
    canvas.setBackground(Color.WHITE);
    panel = new JPanel();
    JButton snowflake = new JButton("Snowflake");               //stores a button used to draw a snowflake
    JButton boxflake = new JButton("BoxFlake");                 //stores a button used to draw a box flake
    JButton tree = new JButton("Tree");                         //stores a button used to draw a tree
    JButton triangle = new JButton("Triangle Fractal");         //stores a button used to draw a triangle fractal
    JButton carpet = new JButton("Carpet");                     //stores a button used to draw a Sierpinski carpet
    panel.add(snowflake);
    panel.add(boxflake);
    panel.add(tree);
    panel.add(triangle);
    panel.add(carpet);
    snowflake.addActionListener(this);
    boxflake.addActionListener(this);
    tree.addActionListener(this);
    triangle.addActionListener(this);
    carpet.addActionListener(this);
    Container c = frame.getContentPane();                       //stores the contents that will be added to the frame of the window
    c.add(canvas, "Center");
    c.add(panel, "South");
    frame.pack();
    frame.setVisible(true);
  }
  
  public void actionPerformed(ActionEvent e){
    JButton temp = (JButton) e.getSource();
    String buttonText = temp.getText();
    if(buttonText.equals("Snowflake")){
      Triangle triangle = new Triangle(new Point(400, 400), 400);
      SnowflakePicture snowflake = new SnowflakePicture(new Triangle[]{triangle});
      snowflake.draw(4, getGraphics());
    }
    if(buttonText.equals("BoxFlake")){
      Rectangle square = new Rectangle(new Point(400, 400), 400);
      SnowflakePicture boxflake = new SnowflakePicture(new Rectangle[]{square});
      boxflake.draw(4, getGraphics());
    }
    if(buttonText.equals("Tree")){
      Line line = new Line(new Point(0, 800), new Point(300, 500));
      TreePicture treePic = new TreePicture(new Line[]{line});
      treePic.draw(4, getGraphics());
    }
    if(buttonText.equals("Triangle Fractal")){
      Triangle triangle1 = new Triangle(new Point(400,400), 400);
      Triangle triangle2 = new Triangle(new Point(200, 200), 200);
      Triangle triangle3 = new Triangle(new Point(600, 600), 200);
      TrianglePicture trianglePic = new TrianglePicture(new Triangle[]{triangle1, triangle2, triangle3});
      trianglePic.draw(4, getGraphics());
    }
    if(buttonText.equals("Carpet")){
      Rectangle square = new Rectangle(new Point(400, 400), 400);
      CarpetPicture carpet = new CarpetPicture(new Rectangle[]{square});
      carpet.draw(4, getGraphics());
    }
  }
  
  /**
   * returns the graphics context that is needed to draw in the new
   * window
   * 
   * @return  the graphics used to draw the fractal
   */
  public Graphics getGraphics()
  {
    if(graphics != null)
    {
      return graphics;
    }
    else
    {
      graphics = canvas.getGraphics();                           //stores the the graphics context use to draw on the canvas
      graphics.setColor(Color.BLACK);
      return graphics;
    }
  }
  
  /**
   * draws the input base shape
   * 
   * @param  baseShape  the shape to be drawn
   */
  public void drawBaseShape(BaseShapes baseShape){
    if(graphics != null)
      baseShape.draw(getGraphics());
  }
  
  /**
   * draws the input base fractal with specified number of layers
   * 
   * @param  fract   the fractal that will be drawn
   * @param  layers  the number of layers of fractals
   */
  public void drawBaseFractal(Fractal fract, int layers){
    if(graphics != null)
      fract.draw(layers, getGraphics());
  }
  
  /**
   * draws the picture of the input (full) fractal with specified number of layers
   * 
   * @param  picFractal  the picture of the fractal to be drawn
   * @param  layers      the number of layers of fractals to be drawn
   */
  public void drawFractal(FractalPicture picFractal, int layers){
    if(graphics != null)
      picFractal.draw(layers, this.getGraphics());
  }
  
  /**
   * Runs the constructor of this classs and gets the graphics context.
   */
  public static void main(String[] args){
    DrawFractal drawPicture = new DrawFractal(800, 800);
    drawPicture.getGraphics();
  }
}